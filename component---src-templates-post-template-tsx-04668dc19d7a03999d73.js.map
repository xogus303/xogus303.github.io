{"version":3,"file":"component---src-templates-post-template-tsx-04668dc19d7a03999d73.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Posts/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Posts/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Posts/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Posts/CommentWidget.tsx","webpack://gatsby-starter-default/./src/components/Posts/PostScrollIndicator.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport { navigate } from 'gatsby'\n\nexport type PostHeadInfoProps = {\n  title: string\n  series: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  max-width: 1100px;\n  width: 100%;\n  margin: 0 auto 0;\n  padding: 86px 0 40px 0;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 40px 20px;\n  }\n`\nconst PrevPageIcon = styled.div`\n  display: grid;\n  position: fixed;\n  top: 10%;\n  place-items: center;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 1px solid #aaa;\n  background: #666;\n  color: #000;\n  font-size: 22px;\n  cursor: pointer;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`\nconst PostHeadInfoWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto 0;\n  max-width: 768px;\n  width: 100%;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-box-orient: vertical;\n  font-size: 45px;\n  font-weight: 800;\n  word-break: keep-all;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\nconst Series = styled(Title)`\n  color: #777;\n  font-size: 30px;\n\n  @media (max-width: 768px) {\n    font-size: 22px;\n  }\n`\nconst PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10%;\n  font-size: 18px;\n  font-weight: 700;\n  color: #aaa;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 15px;\n    font-weight: 400;\n  }\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = ({\n  title,\n  series,\n  date,\n  categories,\n}) => {\n  const goBackPage = () => {\n    if (typeof window !== 'undefined' && window.history.length > 1) {\n      navigate(-1)\n    } else {\n      navigate('/')\n    }\n  }\n\n  return (\n    <PostHeadInfoWrapper>\n      <PrevPageIcon onClick={goBackPage}>\n        <FontAwesomeIcon icon={faArrowLeft} color={'#fff'} />\n      </PrevPageIcon>\n      <PostHeadInfoWrap>\n        <Series>{series}</Series>\n        <Title>{title}</Title>\n        <PostData>\n          <div>{categories.join(' / ')}</div>\n          <div>{date}</div>\n        </PostData>\n      </PostHeadInfoWrap>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from './PostHeadInfo'\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData | undefined\n  thumbnailOrigin?: string\n}\n\nconst PostHeadWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  padding-top: 46px;\n  width: 100%;\n  align-items: center;\n`\n\nconst PostThumbnail = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n\n  @media (max-width: 768px) {\n    padding: 0px 20px;\n  }\n`\n\nconst OriginText = styled.a`\n  color: #999;\n  font-size: 13px;\n`\n\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} />\n))`\n  z-index: -1;\n  max-width: 768px;\n  width: 100%;\n  object-fit: contain;\n  border-radius: 6px;\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = ({\n  title,\n  series,\n  date,\n  categories,\n  thumbnail,\n  thumbnailOrigin,\n}) => {\n  return (\n    <PostHeadWrapper>\n      <PostHeadInfo\n        title={title}\n        series={series}\n        date={date}\n        categories={categories}\n      />\n      <PostThumbnail>\n        {thumbnail && <BackgroundImage image={thumbnail} alt=\"thumbnail\" />}\n        {thumbnailOrigin && (\n          <OriginText href={thumbnailOrigin}>{thumbnailOrigin}</OriginText>\n        )}\n      </PostThumbnail>\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"@emotion/styled\";\n\ninterface PostContentProps {\n  html: string;\n}\n\nconst MarkdownRenderer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 100px 0;\n  word-break: keep-all;\n\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  p {\n    padding: 3px 0;\n  }\n\n  h1,\n  h2,\n  h3 {\n    font-weight: 700;\n    margin-bottom: 10px;\n  }\n\n  * + h1 {\n    margin-top: 80px;\n  }\n  * + h2 {\n    margin-top: 30px;\n  }\n  * + h3 {\n    margin-top: 20px;\n  }\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 700;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*=\"language-\"] {\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*=\"language-\"],\n  pre[class*=\"language-\"] {\n    tab-size: 2;\n    white-space: break-spaces;\n  }\n\n  table {\n    border: 0.5px solid #ddd;\n    border-radius: 4px;\n    border-spacing: 0;\n  }\n  table th {\n    color: #555;\n  }\n  table th,\n  table td {\n    padding: 5px;\n    border: 0.5px solid #ddd;\n  }\n\n  span.desc {\n    color: #313131;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`;\n\nconst PostContent: FunctionComponent<PostContentProps> = ({ html }) => {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />;\n};\n\nexport default PostContent;\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'xogus303/xogus303.github.io'\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst CommentWidget: FunctionComponent = () => {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { cssState } from 'constants/type'\n\nconst Wrapper = styled.div`\n  position: fixed;\n  top: 46px;\n  width: 100%;\n`\nconst Indicator = styled.div<cssState>`\n  width: ${props => props.percent}%;\n  height: 10px;\n  background-color: #aaa;\n`\n\ninterface PostScrollIndicatorProps {\n  widthPercent: number\n}\n\nconst PostScrollIndicator = ({ widthPercent }: PostScrollIndicatorProps) => {\n  return (\n    <Wrapper>\n      <Indicator percent={widthPercent} />\n    </Wrapper>\n  )\n}\n\nexport default PostScrollIndicator\n","import React, { FunctionComponent, useEffect, useState } from 'react'\nimport { graphql } from 'gatsby'\n\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Posts/PostHead'\nimport { PostFrontmatterType } from 'types/PostItem.types'\nimport PostContent from 'components/Posts/PostContent'\nimport CommentWidget from 'components/Posts/CommentWidget'\nimport PostScrollIndicator from 'components/Posts/PostScrollIndicator'\n\nexport type PostPageItemType = {\n  node: {\n    html: string\n    frontmatter: PostFrontmatterType\n  }\n}\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        series,\n        summary,\n        date,\n        categories,\n        thumbnail,\n        thumbnailOrigin,\n      },\n    },\n  } = edges[0]\n\n  const [pageHeight, setPageHeight] = useState<number>(0)\n  const [scrollY, setScrollY] = useState<number>(0)\n  const handleScrollIndicator = () => {\n    setScrollY(window.pageYOffset)\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScrollIndicator)\n    return () => {\n      window.removeEventListener('scroll', handleScrollIndicator)\n    }\n  }, [])\n\n  useEffect(\n    () => {\n      if (typeof window !== 'undefined') {\n        setPageHeight(document.body.scrollHeight - document.body.clientHeight)\n      }\n    },\n    typeof window !== 'undefined'\n      ? [document?.body.scrollHeight, document.body.clientHeight]\n      : [],\n  )\n\n  const scrollGauge = (scrollY * 100) / pageHeight\n  return (\n    <Template\n      title={`${series !== '' ? series + ' - ' : ''}${title}`}\n      description={summary}\n      url={href}\n      image={thumbnail?.publicURL}\n    >\n      <PostScrollIndicator widthPercent={scrollGauge} />\n      <PostHead\n        title={title}\n        series={series}\n        date={date}\n        categories={categories}\n        thumbnail={thumbnail?.childImageSharp?.gatsbyImageData}\n        thumbnailOrigin={thumbnailOrigin}\n      />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            series\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n            thumbnailOrigin\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostHeadInfoWrapper","_styled","target","name","styles","PrevPageIcon","PostHeadInfoWrap","Title","Series","PostData","_ref","title","series","date","categories","___EmotionJSX","onClick","goBackPage","window","history","length","navigate","FontAwesomeIcon","icon","faArrowLeft","color","join","PostHeadWrapper","PostThumbnail","OriginText","BackgroundImage","props","GatsbyImage","thumbnail","thumbnailOrigin","PostHeadInfo","image","alt","href","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","CommentWidget","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","Wrapper","Indicator","percent","widthPercent","_document","_thumbnail$childImage","data","allMarkdownRemark","edges","location","node","frontmatter","summary","pageHeight","setPageHeight","useState","scrollY","setScrollY","handleScrollIndicator","pageYOffset","addEventListener","removeEventListener","body","scrollHeight","clientHeight","scrollGauge","Template","description","url","publicURL","PostScrollIndicator","PostHead","childImageSharp","gatsbyImageData","PostContent"],"sourceRoot":""}